"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

type Pagination {
  total: Int!

  page: Int!

  pageSize: Int!

  pageCount: Int!
}

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

type DeleteMutationResponse {
  documentId: ID!
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

enum PublicationStatus {
  DRAFT

  PUBLISHED
}

input IDFilterInput {
  and: [ID]

  or: [ID]

  not: IDFilterInput

  eq: ID

  eqi: ID

  ne: ID

  nei: ID

  startsWith: ID

  endsWith: ID

  contains: ID

  notContains: ID

  containsi: ID

  notContainsi: ID

  gt: ID

  gte: ID

  lt: ID

  lte: ID

  null: Boolean

  notNull: Boolean

  in: [ID]

  notIn: [ID]

  between: [ID]
}

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

input BooleanFilterInput {
  and: [Boolean]

  or: [Boolean]

  not: BooleanFilterInput

  eq: Boolean

  eqi: Boolean

  ne: Boolean

  nei: Boolean

  startsWith: Boolean

  endsWith: Boolean

  contains: Boolean

  notContains: Boolean

  containsi: Boolean

  notContainsi: Boolean

  gt: Boolean

  gte: Boolean

  lt: Boolean

  lte: Boolean

  null: Boolean

  notNull: Boolean

  in: [Boolean]

  notIn: [Boolean]

  between: [Boolean]
}

input StringFilterInput {
  and: [String]

  or: [String]

  not: StringFilterInput

  eq: String

  eqi: String

  ne: String

  nei: String

  startsWith: String

  endsWith: String

  contains: String

  notContains: String

  containsi: String

  notContainsi: String

  gt: String

  gte: String

  lt: String

  lte: String

  null: Boolean

  notNull: Boolean

  in: [String]

  notIn: [String]

  between: [String]
}

input IntFilterInput {
  and: [Int]

  or: [Int]

  not: IntFilterInput

  eq: Int

  eqi: Int

  ne: Int

  nei: Int

  startsWith: Int

  endsWith: Int

  contains: Int

  notContains: Int

  containsi: Int

  notContainsi: Int

  gt: Int

  gte: Int

  lt: Int

  lte: Int

  null: Boolean

  notNull: Boolean

  in: [Int]

  notIn: [Int]

  between: [Int]
}

input FloatFilterInput {
  and: [Float]

  or: [Float]

  not: FloatFilterInput

  eq: Float

  eqi: Float

  ne: Float

  nei: Float

  startsWith: Float

  endsWith: Float

  contains: Float

  notContains: Float

  containsi: Float

  notContainsi: Float

  gt: Float

  gte: Float

  lt: Float

  lte: Float

  null: Boolean

  notNull: Boolean

  in: [Float]

  notIn: [Float]

  between: [Float]
}

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

input DateFilterInput {
  and: [Date]

  or: [Date]

  not: DateFilterInput

  eq: Date

  eqi: Date

  ne: Date

  nei: Date

  startsWith: Date

  endsWith: Date

  contains: Date

  notContains: Date

  containsi: Date

  notContainsi: Date

  gt: Date

  gte: Date

  lt: Date

  lte: Date

  null: Boolean

  notNull: Boolean

  in: [Date]

  notIn: [Date]

  between: [Date]
}

input DateTimeFilterInput {
  and: [DateTime]

  or: [DateTime]

  not: DateTimeFilterInput

  eq: DateTime

  eqi: DateTime

  ne: DateTime

  nei: DateTime

  startsWith: DateTime

  endsWith: DateTime

  contains: DateTime

  notContains: DateTime

  containsi: DateTime

  notContainsi: DateTime

  gt: DateTime

  gte: DateTime

  lt: DateTime

  lte: DateTime

  null: Boolean

  notNull: Boolean

  in: [DateTime]

  notIn: [DateTime]

  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]

  or: [JSON]

  not: JSONFilterInput

  eq: JSON

  eqi: JSON

  ne: JSON

  nei: JSON

  startsWith: JSON

  endsWith: JSON

  contains: JSON

  notContains: JSON

  containsi: JSON

  notContainsi: JSON

  gt: JSON

  gte: JSON

  lt: JSON

  lte: JSON

  null: Boolean

  notNull: Boolean

  in: [JSON]

  notIn: [JSON]

  between: [JSON]
}

enum ENUM_BOOK_BOOK_STATUS {
  available

  unavailable
}

enum ENUM_BOOK_LANGUAGE {
  Khmer

  English

  Thailand
}

input BookFiltersInput {
  documentId: IDFilterInput

  book_title: StringFilterInput

  book_description: StringFilterInput

  ISBN: StringFilterInput

  page: StringFilterInput

  year: DateFilterInput

  book_categories: BookCategoryFiltersInput

  publishers: PublisherFiltersInput

  book_status: StringFilterInput

  language: StringFilterInput

  time_reading: StringFilterInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [BookFiltersInput]

  or: [BookFiltersInput]

  not: BookFiltersInput
}

input BookInput {
  book_title: String

  book_cover: [ID]

  book_description: String

  ISBN: String

  page: String

  year: Date

  book_categories: [ID]

  publishers: [ID]

  book_status: ENUM_BOOK_BOOK_STATUS

  language: ENUM_BOOK_LANGUAGE

  time_reading: String

  publishedAt: DateTime
}

type Book {
  documentId: ID!

  book_title: String!

  book_cover_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): UploadFileRelationResponseCollection!

  book_cover(filters: UploadFileFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): [UploadFile]!

  book_description: String!

  ISBN: String!

  page: String!

  year: Date!

  book_categories_connection(filters: BookCategoryFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): BookCategoryRelationResponseCollection

  book_categories(filters: BookCategoryFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): [BookCategory]!

  publishers_connection(filters: PublisherFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): PublisherRelationResponseCollection

  publishers(filters: PublisherFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): [Publisher]!

  book_status: ENUM_BOOK_BOOK_STATUS

  language: ENUM_BOOK_LANGUAGE

  time_reading: String!

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type BookEntityResponseCollection {
  nodes: [Book!]!

  pageInfo: Pagination!
}

type BookRelationResponseCollection {
  nodes: [Book!]!
}

input BookCategoryFiltersInput {
  documentId: IDFilterInput

  category_name: StringFilterInput

  books: BookFiltersInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [BookCategoryFiltersInput]

  or: [BookCategoryFiltersInput]

  not: BookCategoryFiltersInput
}

input BookCategoryInput {
  category_name: String

  category_cover: [ID]

  books: [ID]

  publishedAt: DateTime
}

type BookCategory {
  documentId: ID!

  category_name: String!

  category_cover_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): UploadFileRelationResponseCollection!

  category_cover(filters: UploadFileFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): [UploadFile]!

  books_connection(filters: BookFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): BookRelationResponseCollection

  books(filters: BookFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): [Book]!

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type BookCategoryEntityResponseCollection {
  nodes: [BookCategory!]!

  pageInfo: Pagination!
}

type BookCategoryRelationResponseCollection {
  nodes: [BookCategory!]!
}

input PublisherFiltersInput {
  documentId: IDFilterInput

  publisher_name: StringFilterInput

  book: BookFiltersInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [PublisherFiltersInput]

  or: [PublisherFiltersInput]

  not: PublisherFiltersInput
}

input PublisherInput {
  publisher_name: String

  book: ID

  publisher_cover: [ID]

  publishedAt: DateTime
}

type Publisher {
  documentId: ID!

  publisher_name: String!

  book: Book

  publisher_cover_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): UploadFileRelationResponseCollection!

  publisher_cover(filters: UploadFileFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): [UploadFile]!

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type PublisherEntityResponseCollection {
  nodes: [Publisher!]!

  pageInfo: Pagination!
}

type PublisherRelationResponseCollection {
  nodes: [Publisher!]!
}

input UploadFileFiltersInput {
  documentId: IDFilterInput

  name: StringFilterInput

  alternativeText: StringFilterInput

  caption: StringFilterInput

  width: IntFilterInput

  height: IntFilterInput

  formats: JSONFilterInput

  hash: StringFilterInput

  ext: StringFilterInput

  mime: StringFilterInput

  size: FloatFilterInput

  url: StringFilterInput

  previewUrl: StringFilterInput

  provider: StringFilterInput

  provider_metadata: JSONFilterInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [UploadFileFiltersInput]

  or: [UploadFileFiltersInput]

  not: UploadFileFiltersInput
}

type UploadFile {
  documentId: ID!

  name: String!

  alternativeText: String

  caption: String

  width: Int

  height: Int

  formats: JSON

  hash: String!

  ext: String

  mime: String!

  size: Float!

  url: String!

  previewUrl: String

  provider: String!

  provider_metadata: JSON

  related: [GenericMorph]

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type UploadFileEntityResponseCollection {
  nodes: [UploadFile!]!

  pageInfo: Pagination!
}

type UploadFileRelationResponseCollection {
  nodes: [UploadFile!]!
}

input I18NLocaleFiltersInput {
  documentId: IDFilterInput

  name: StringFilterInput

  code: StringFilterInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [I18NLocaleFiltersInput]

  or: [I18NLocaleFiltersInput]

  not: I18NLocaleFiltersInput
}

type I18NLocale {
  documentId: ID!

  name: String

  code: String

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type I18NLocaleEntityResponseCollection {
  nodes: [I18NLocale!]!

  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowFiltersInput {
  documentId: IDFilterInput

  name: StringFilterInput

  stages: ReviewWorkflowsWorkflowStageFiltersInput

  stageRequiredToPublish: ReviewWorkflowsWorkflowStageFiltersInput

  contentTypes: JSONFilterInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [ReviewWorkflowsWorkflowFiltersInput]

  or: [ReviewWorkflowsWorkflowFiltersInput]

  not: ReviewWorkflowsWorkflowFiltersInput
}

input ReviewWorkflowsWorkflowInput {
  name: String

  stages: [ID]

  stageRequiredToPublish: ID

  contentTypes: JSON

  publishedAt: DateTime
}

type ReviewWorkflowsWorkflow {
  documentId: ID!

  name: String!

  stages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): ReviewWorkflowsWorkflowStageRelationResponseCollection

  stages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): [ReviewWorkflowsWorkflowStage]!

  stageRequiredToPublish: ReviewWorkflowsWorkflowStage

  contentTypes: JSON!

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type ReviewWorkflowsWorkflowEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflow!]!

  pageInfo: Pagination!
}

input ReviewWorkflowsWorkflowStageFiltersInput {
  documentId: IDFilterInput

  name: StringFilterInput

  color: StringFilterInput

  workflow: ReviewWorkflowsWorkflowFiltersInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [ReviewWorkflowsWorkflowStageFiltersInput]

  or: [ReviewWorkflowsWorkflowStageFiltersInput]

  not: ReviewWorkflowsWorkflowStageFiltersInput
}

input ReviewWorkflowsWorkflowStageInput {
  name: String

  color: String

  workflow: ID

  publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStage {
  documentId: ID!

  name: String

  color: String

  workflow: ReviewWorkflowsWorkflow

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type ReviewWorkflowsWorkflowStageEntityResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!

  pageInfo: Pagination!
}

type ReviewWorkflowsWorkflowStageRelationResponseCollection {
  nodes: [ReviewWorkflowsWorkflowStage!]!
}

input UsersPermissionsPermissionFiltersInput {
  documentId: IDFilterInput

  action: StringFilterInput

  role: UsersPermissionsRoleFiltersInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [UsersPermissionsPermissionFiltersInput]

  or: [UsersPermissionsPermissionFiltersInput]

  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  documentId: ID!

  action: String!

  role: UsersPermissionsRole

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type UsersPermissionsPermissionRelationResponseCollection {
  nodes: [UsersPermissionsPermission!]!
}

input UsersPermissionsRoleFiltersInput {
  documentId: IDFilterInput

  name: StringFilterInput

  description: StringFilterInput

  type: StringFilterInput

  permissions: UsersPermissionsPermissionFiltersInput

  users: UsersPermissionsUserFiltersInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [UsersPermissionsRoleFiltersInput]

  or: [UsersPermissionsRoleFiltersInput]

  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String

  description: String

  type: String

  permissions: [ID]

  users: [ID]

  publishedAt: DateTime
}

type UsersPermissionsRole {
  documentId: ID!

  name: String!

  description: String

  type: String

  permissions_connection(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection

  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): [UsersPermissionsPermission]!

  users_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): UsersPermissionsUserRelationResponseCollection

  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = []): [UsersPermissionsUser]!

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type UsersPermissionsRoleEntityResponseCollection {
  nodes: [UsersPermissionsRole!]!

  pageInfo: Pagination!
}

input UsersPermissionsUserFiltersInput {
  documentId: IDFilterInput

  username: StringFilterInput

  email: StringFilterInput

  provider: StringFilterInput

  confirmed: BooleanFilterInput

  blocked: BooleanFilterInput

  role: UsersPermissionsRoleFiltersInput

  createdAt: DateTimeFilterInput

  updatedAt: DateTimeFilterInput

  publishedAt: DateTimeFilterInput

  and: [UsersPermissionsUserFiltersInput]

  or: [UsersPermissionsUserFiltersInput]

  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String

  email: String

  provider: String

  confirmed: Boolean

  blocked: Boolean

  role: ID

  publishedAt: DateTime

  password: String
}

type UsersPermissionsUser {
  documentId: ID!

  username: String!

  email: String!

  provider: String

  confirmed: Boolean

  blocked: Boolean

  role: UsersPermissionsRole

  createdAt: DateTime

  updatedAt: DateTime

  publishedAt: DateTime
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponseCollection {
  nodes: [UsersPermissionsUser!]!

  pageInfo: Pagination!
}

type UsersPermissionsUserRelationResponseCollection {
  nodes: [UsersPermissionsUser!]!
}

union GenericMorph = Book|BookCategory|Publisher|UploadFile|I18NLocale|ReviewWorkflowsWorkflow|ReviewWorkflowsWorkflowStage|UsersPermissionsPermission|UsersPermissionsRole|UsersPermissionsUser

input FileInfoInput {
  name: String

  alternativeText: String

  caption: String
}

type UsersPermissionsMe {
  id: ID!

  documentId: ID!

  username: String!

  email: String

  confirmed: Boolean

  blocked: Boolean

  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!

  name: String!

  description: String

  type: String
}

input UsersPermissionsRegisterInput {
  username: String!

  email: String!

  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!

  password: String!

  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String

  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int

  pageSize: Int

  start: Int

  limit: Int
}

type Query {
  book(documentId: ID!, status: PublicationStatus = PUBLISHED): Book

  books_connection(filters: BookFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): BookEntityResponseCollection

  books(filters: BookFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): [Book]!

  bookCategory(documentId: ID!, status: PublicationStatus = PUBLISHED): BookCategory

  bookCategories_connection(filters: BookCategoryFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): BookCategoryEntityResponseCollection

  bookCategories(filters: BookCategoryFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): [BookCategory]!

  publisher(documentId: ID!, status: PublicationStatus = PUBLISHED): Publisher

  publishers_connection(filters: PublisherFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): PublisherEntityResponseCollection

  publishers(filters: PublisherFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): [Publisher]!

  uploadFile(documentId: ID!, status: PublicationStatus = PUBLISHED): UploadFile

  uploadFiles_connection(filters: UploadFileFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): UploadFileEntityResponseCollection

  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): [UploadFile]!

  i18NLocale(documentId: ID!, status: PublicationStatus = PUBLISHED): I18NLocale

  i18NLocales_connection(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): I18NLocaleEntityResponseCollection

  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): [I18NLocale]!

  reviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflow

  reviewWorkflowsWorkflows_connection(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowEntityResponseCollection

  reviewWorkflowsWorkflows(filters: ReviewWorkflowsWorkflowFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflow]!

  reviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStage

  reviewWorkflowsWorkflowStages_connection(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): ReviewWorkflowsWorkflowStageEntityResponseCollection

  reviewWorkflowsWorkflowStages(filters: ReviewWorkflowsWorkflowStageFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): [ReviewWorkflowsWorkflowStage]!

  usersPermissionsRole(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsRole

  usersPermissionsRoles_connection(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsRoleEntityResponseCollection

  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsRole]!

  usersPermissionsUser(documentId: ID!, status: PublicationStatus = PUBLISHED): UsersPermissionsUser

  usersPermissionsUsers_connection(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): UsersPermissionsUserEntityResponseCollection

  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {

  }
  , sort: [String] = [], status: PublicationStatus = PUBLISHED): [UsersPermissionsUser]!

  me: UsersPermissionsMe
}

type Mutation {
  createBook(status: PublicationStatus = PUBLISHED, data: BookInput!): Book

  updateBook(documentId: ID!, status: PublicationStatus = PUBLISHED, data: BookInput!): Book

  deleteBook(documentId: ID!): DeleteMutationResponse

  createBookCategory(status: PublicationStatus = PUBLISHED, data: BookCategoryInput!): BookCategory

  updateBookCategory(documentId: ID!, status: PublicationStatus = PUBLISHED, data: BookCategoryInput!): BookCategory

  deleteBookCategory(documentId: ID!): DeleteMutationResponse

  createPublisher(status: PublicationStatus = PUBLISHED, data: PublisherInput!): Publisher

  updatePublisher(documentId: ID!, status: PublicationStatus = PUBLISHED, data: PublisherInput!): Publisher

  deletePublisher(documentId: ID!): DeleteMutationResponse

  createReviewWorkflowsWorkflow(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow

  updateReviewWorkflowsWorkflow(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowInput!): ReviewWorkflowsWorkflow

  deleteReviewWorkflowsWorkflow(documentId: ID!): DeleteMutationResponse

  createReviewWorkflowsWorkflowStage(status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage

  updateReviewWorkflowsWorkflowStage(documentId: ID!, status: PublicationStatus = PUBLISHED, data: ReviewWorkflowsWorkflowStageInput!): ReviewWorkflowsWorkflowStage

  deleteReviewWorkflowsWorkflowStage(documentId: ID!): DeleteMutationResponse

  updateUploadFile(id: ID!, info: FileInfoInput): UploadFile!

  deleteUploadFile(id: ID!): UploadFile

  """
  Create a new role
  """
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """
  Update an existing role
  """
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload

  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """
  Create a new user
  """
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """
  Update an existing user
  """
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload

  """
  Change user password. Confirm with the current password.
  """
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload

  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type

  """
  A list of all directives supported by this server.
  """
  directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind!

  name: String

  description: String

  specifiedByURL: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  isOneOf: Boolean
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  """
  Indicates this type is a scalar.
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!

  description: String

  type: __Type!

  """
  A GraphQL-formatted string representing the default value for this input value.
  """
  defaultValue: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  """
  Location adjacent to a query operation.
  """
  QUERY

  """
  Location adjacent to a mutation operation.
  """
  MUTATION

  """
  Location adjacent to a subscription operation.
  """
  SUBSCRIPTION

  """
  Location adjacent to a field.
  """
  FIELD

  """
  Location adjacent to a fragment definition.
  """
  FRAGMENT_DEFINITION

  """
  Location adjacent to a fragment spread.
  """
  FRAGMENT_SPREAD

  """
  Location adjacent to an inline fragment.
  """
  INLINE_FRAGMENT

  """
  Location adjacent to a variable definition.
  """
  VARIABLE_DEFINITION

  """
  Location adjacent to a schema definition.
  """
  SCHEMA

  """
  Location adjacent to a scalar definition.
  """
  SCALAR

  """
  Location adjacent to an object type definition.
  """
  OBJECT

  """
  Location adjacent to a field definition.
  """
  FIELD_DEFINITION

  """
  Location adjacent to an argument definition.
  """
  ARGUMENT_DEFINITION

  """
  Location adjacent to an interface definition.
  """
  INTERFACE

  """
  Location adjacent to a union definition.
  """
  UNION

  """
  Location adjacent to an enum definition.
  """
  ENUM

  """
  Location adjacent to an enum value definition.
  """
  ENUM_VALUE

  """
  Location adjacent to an input object type definition.
  """
  INPUT_OBJECT

  """
  Location adjacent to an input object field definition.
  """
  INPUT_FIELD_DEFINITION
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated ("Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/)." reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|INPUT_FIELD_DEFINITION|ENUM_VALUE

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behavior of this scalar." url: String!) on SCALAR

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

schema {
  query: Query
  mutation: Mutation
}
